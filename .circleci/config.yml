# Elixir CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-elixir/
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    parallelism: 1
    docker:
      # specify the version here
      - image: cimg/elixir:1.13.4
        environment:
          MIX_ENV: test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:10.1-alpine
        auth:
          username: postgres
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: future_butcher_api_dev

    working_directory: ~/repo
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      # specify any bash command here prefixed with `run: `
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - restore_cache:
          keys:
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: mix do deps.get, compile
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: mix ecto.setup
      - run: mix test
      - store_test_results:
          path: _build/test/lib/future_butcher_api
